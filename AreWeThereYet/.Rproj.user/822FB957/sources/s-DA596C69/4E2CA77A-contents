
#Load libraries...
library(scales)
library(lubridate)
library(shiny)
library(DT)
library(plotly)

# Define UI for application 

#Application title
ui<- fluidPage(
  titlePanel("Time progress:"),
       mainPanel(
         tabsetPanel(
                     
          tabPanel("Time Plot", icon = icon("bar-chart-o"),
                   
                   br(),
                   br(),
                   
                   plotlyOutput('TimePlot'),
                   
                    
                   br() ),

          tabPanel("StopWatch", icon = icon("clock-o"),
                   hr(),
                   actionButton('start','Start'),
                   actionButton('stop','Stop'),
                   actionButton('reset','Reset'),
                   numericInput('seconds','Seconds:',value=10,min=0,max=99999,step=1),
                   textOutput('timeleft')
                   ),
          
          tabPanel("Time Table", icon = icon("table"),
                   br(),
                   br(),
                   
                   tableOutput('TimeTable')))
      )
  )


# Define server logic required to draw a histogram
server <- function(input, output, session) {
  library(DT)
  library(plotly)
    output$TimeTable <- renderTable({
      
      invalidateLater(1000, session)
      
      progressFunction(Sys.Date())
      
    }, striped = TRUE, hover = TRUE, bordered = TRUE)
    
    output$TimePlot <- renderPlotly({
      
     invalidateLater(1000, session)
      
      time <- progressFunction(Sys.Date())
      Year<- as.numeric(sub("%", "",time$Year))
      Quarter <- as.numeric(sub("%", "",time$Quarter))
      Month <- as.numeric(sub("%", "",time$Month))
      Day <- as.numeric(sub("%", "",time$Day))
      Hour <- as.numeric(sub("%", "",time$Hour))
      Minute <- as.numeric(sub("%", "",time$Minute))
      
      df<- as.data.frame(cbind(Year,Quarter,Month,Day,Hour,Minute))
      
      
      Time <- names(df)
      Growth <- as.numeric(df[1,])
                          data1<- data.frame(cbind(Time,Growth))
                          data1$Growth=as.numeric(levels(data1$Growth))[data1$Growth]

                          library(plotly)
                          yform <- list(categoryorder = "array",
                                        categoryarray = data1$Time,
                                        showgrid = T, showline = F, showticklabels = TRUE,
                                        title = "",
                                        tickfont = list(family = "Georgia",
                                                        size = 15,
                                                        color = toRGB("black")))
                          t <- list(
                            family = "Georgia",
                            size = 14,
                            color = toRGB("black"))
                          
                          plot_ly(data = data1,
                                  x = ~Growth,#'rgba(204,204,204,1)'
                                  y = ~Time,
                                  type = "bar", orientation = 'h', text = paste(Growth,"%"), textfont = t, textposition = 'auto',
                                  marker = list( color = ~Growth,colors= c("green","blue") ,size=10 , opacity=0.2, line = list(color =~Growth, opacity=0.2, width = 1))
                                  )%>%
                                  #mode = "lines+markers")
                            layout(title =  paste("The current time is: ", format(Sys.time(), "%a %d %b %Y %X %Z")),
                                   font = list(family = "Georgia",
                                   size = 13,
                                   color = toRGB("black")),
                                   height = 250,
                                   xaxis = list(range=c(0, 100),zeroline = F, showline = F, showticklabels = F, showgrid = T,title = ""),
                                   yaxis = yform,plot_bgcolor= 'rgba(50, 171, 96, 0.01)'#,
                                   #paper_bgcolor= 'rgba(50, 171, 96, 0.1)'
                                   )
    })
    
    # Initialize the timer, 10 seconds, not active.
    timer <- reactiveVal(10)
    active <- reactiveVal(FALSE)
    
    # Output the time left.
    output$timeleft <- renderText({
      paste("Time left: ", seconds_to_period(timer()))
    })
    
    # observer that invalidates every second. If timer is active, decrease by one.
    observe({
      invalidateLater(1000, session)
      isolate({
        if(active())
        {
          timer(timer()-1)
          if(timer()<1)
          {
            active(FALSE)
            showModal(modalDialog(
              title = "Important message",
              "Countdown completed!"
            ))
          }
        }
      })
    })
    
    # observers for actionbuttons
    observeEvent(input$start, {active(TRUE)})
    observeEvent(input$stop, {active(FALSE)})
    observeEvent(input$reset, {timer(input$seconds)})
  }
# Run the application 
shinyApp(ui = ui, server = server)
